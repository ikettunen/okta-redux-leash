{"ast":null,"code":"var _jsxFileName = \"/home/ilkka/okta-redux-leash/src/components/Search.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Search } from 'semantic-ui-react';\nimport Fuse from 'fuse.js';\nimport { selectUser } from './users';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchPage = ({\n  users,\n  selectUser\n}) => {\n  _s();\n\n  const [term, setTerm] = React.useState('');\n  const filteredUsers = React.useMemo(() => {\n    if (!term) return users;\n    const fuse = new Fuse(users, {\n      shouldSort: true,\n      keys: ['name', 'username']\n    });\n    return fuse.search(term);\n  }, [users, term]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Search, {\n      onResultSelect: (e, {\n        result\n      }) => {\n        setTerm('');\n        selectUser(result.user);\n      },\n      onSearchChange: e => setTerm(e.currentTarget.value),\n      results: filteredUsers.slice(0, 5).map(user => ({\n        childKey: user.id,\n        title: user.name,\n        description: user.username,\n        image: user.avatar,\n        user\n      })),\n      value: term\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchPage, \"bXCHPX0IQcsLfXaNJdyYkBBmjAQ=\");\n\n_c = SearchPage;\n\nconst mapStateToProps = state => ({\n  users: state.users.users\n});\n\nconst mapDispatchToProps = {\n  selectUser\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchPage\");","map":{"version":3,"sources":["/home/ilkka/okta-redux-leash/src/components/Search.js"],"names":["React","connect","Container","Search","Fuse","selectUser","SearchPage","users","term","setTerm","useState","filteredUsers","useMemo","fuse","shouldSort","keys","search","e","result","user","currentTarget","value","slice","map","childKey","id","title","name","description","username","image","avatar","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,mBAAlC;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,SAASC,UAAT,QAA2B,SAA3B;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASF,EAAAA;AAAT,CAAD,KAA2B;AAAA;;AAC5C,QAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACU,QAAN,CAAe,EAAf,CAAxB;AACA,QAAMC,aAAa,GAAGX,KAAK,CAACY,OAAN,CAAc,MAAM;AACxC,QAAI,CAACJ,IAAL,EAAW,OAAOD,KAAP;AACX,UAAMM,IAAI,GAAG,IAAIT,IAAJ,CAASG,KAAT,EAAgB;AAC3BO,MAAAA,UAAU,EAAE,IADe;AAE3BC,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,UAAT;AAFqB,KAAhB,CAAb;AAKA,WAAOF,IAAI,CAACG,MAAL,CAAYR,IAAZ,CAAP;AACD,GARqB,EAQnB,CAACD,KAAD,EAAQC,IAAR,CARmB,CAAtB;AAUA,sBACE,QAAC,SAAD;AAAA,2BACE,QAAC,MAAD;AACE,MAAA,cAAc,EAAE,CAACS,CAAD,EAAI;AAAEC,QAAAA;AAAF,OAAJ,KAAmB;AACjCT,QAAAA,OAAO,CAAC,EAAD,CAAP;AACAJ,QAAAA,UAAU,CAACa,MAAM,CAACC,IAAR,CAAV;AACD,OAJH;AAKE,MAAA,cAAc,EAAEF,CAAC,IAAIR,OAAO,CAACQ,CAAC,CAACG,aAAF,CAAgBC,KAAjB,CAL9B;AAME,MAAA,OAAO,EAAEV,aAAa,CAACW,KAAd,CAAoB,CAApB,EAAuB,CAAvB,EAA0BC,GAA1B,CAA8BJ,IAAI,KAAK;AAC9CK,QAAAA,QAAQ,EAAEL,IAAI,CAACM,EAD+B;AAE9CC,QAAAA,KAAK,EAAEP,IAAI,CAACQ,IAFkC;AAG9CC,QAAAA,WAAW,EAAET,IAAI,CAACU,QAH4B;AAI9CC,QAAAA,KAAK,EAAEX,IAAI,CAACY,MAJkC;AAK9CZ,QAAAA;AAL8C,OAAL,CAAlC,CANX;AAaE,MAAA,KAAK,EAAEX;AAbT;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA/BD;;GAAMF,U;;KAAAA,U;;AAiCN,MAAM0B,eAAe,GAAGC,KAAK,KAAK;AAChC1B,EAAAA,KAAK,EAAE0B,KAAK,CAAC1B,KAAN,CAAYA;AADa,CAAL,CAA7B;;AAIA,MAAM2B,kBAAkB,GAAG;AAAE7B,EAAAA;AAAF,CAA3B;AAEA,eAAeJ,OAAO,CACpB+B,eADoB,EAEpBE,kBAFoB,CAAP,CAGb5B,UAHa,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Container, Search } from 'semantic-ui-react';\nimport Fuse from 'fuse.js';\n\nimport { selectUser } from './users';\n\nconst SearchPage = ({ users, selectUser }) => {\n  const [term, setTerm] = React.useState('');\n  const filteredUsers = React.useMemo(() => {\n    if (!term) return users;\n    const fuse = new Fuse(users, {\n      shouldSort: true,\n      keys: ['name', 'username'],\n    });\n\n    return fuse.search(term);\n  }, [users, term]);\n\n  return (\n    <Container>\n      <Search\n        onResultSelect={(e, { result }) => {\n          setTerm('');\n          selectUser(result.user);\n        }}\n        onSearchChange={e => setTerm(e.currentTarget.value)}\n        results={filteredUsers.slice(0, 5).map(user => ({\n          childKey: user.id,\n          title: user.name,\n          description: user.username,\n          image: user.avatar,\n          user,\n        }))}\n        value={term}\n      />\n    </Container>\n  );\n};\n\nconst mapStateToProps = state => ({\n  users: state.users.users,\n});\n\nconst mapDispatchToProps = { selectUser };\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(SearchPage);\n"]},"metadata":{},"sourceType":"module"}