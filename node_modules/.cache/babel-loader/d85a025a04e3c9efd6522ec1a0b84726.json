{"ast":null,"code":"(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : (global = global || self, factory(global['fast-equals'] = {}));\n})(this, function (exports) {\n  'use strict';\n  /**\n   * @constant {boolean} HAS_MAP_SUPPORT\n   */\n\n  var HAS_MAP_SUPPORT = typeof Map === 'function';\n  /**\n   * @constant {boolean} HAS_SET_SUPPORT\n   */\n\n  var HAS_SET_SUPPORT = typeof Set === 'function';\n  /**\n   * @constant {boolean} HAS_WEAKSET_SUPPORT\n   */\n\n  var HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function'; // constants\n\n  var keys = Object.keys;\n  /**\n   * @function addObjectToCache\n   *\n   * @description\n   * add object to cache if it is indeed an object\n   *\n   * @param {any} object the object to potentially add to the cache\n   * @param {Object|WeakSet} cache the cache to add to\n   * @returns {void}\n   */\n\n  var addObjectToCache = function addObjectToCache(object, cache) {\n    return object && typeof object === 'object' && cache.add(object);\n  };\n  /**\n   *\n   * @param {Array<Array<any>>} pairs the pairs to check in\n   * @param {Array<any>} pairToMatch the pair to check if exists\n   * @param {function} isEqual the equality comparator\n   * @param {any} meta the meta item to pass through\n   * @returns {boolean} does the pair exist in the pairs\n   */\n\n\n  var hasPair = function hasPair(pairs, pairToMatch, isEqual, meta) {\n    var pair;\n\n    for (var index = 0; index < pairs.length; index++) {\n      pair = pairs[index];\n\n      if (isEqual(pair[0], pairToMatch[0], meta) && isEqual(pair[1], pairToMatch[1], meta)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @function hasValue\n   *\n   * @description\n   * does the values include the vakye passed\n   *\n   * @param {Array<any>} values the values to check in\n   * @param {any} item the value to locate\n   * @param {function} isEqual the equality comparator\n   * @param {any} meta the meta item to pass through\n   * @returns {boolean} does the value exist in the values\n   */\n\n\n  var hasValue = function hasValue(values, item, isEqual, meta) {\n    for (var index = 0; index < values.length; index++) {\n      if (isEqual(values[index], item, meta)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n  /**\n   * @function sameValueZeroEqual\n   *\n   * @description\n   * are the objects passed strictly equal or both NaN\n   *\n   * @param {any} objectA the object to compare against\n   * @param {any} objectB the object to test\n   * @returns {boolean} are the objects equal by the SameValueZero principle\n   */\n\n\n  var sameValueZeroEqual = function sameValueZeroEqual(objectA, objectB) {\n    return objectA === objectB || objectA !== objectA && objectB !== objectB;\n  };\n  /**\n   * @function isPlainObject\n   *\n   * @description\n   * is the object a plain object\n   *\n   * @param {any} object the object to test\n   * @returns {boolean} is the object a plain object\n   */\n\n\n  var isPlainObject = function isPlainObject(object) {\n    return object.constructor === Object;\n  };\n  /**\n   * @function isPromiseLike\n   *\n   * @description\n   * is the object promise-like (thenable)\n   *\n   * @param {any} object the object to test\n   * @returns {boolean} is the object promise-like\n   */\n\n\n  var isPromiseLike = function isPromiseLike(object) {\n    return typeof object.then === 'function';\n  };\n  /**\n   * @function isReactElement\n   *\n   * @description\n   * is the object passed a react element\n   *\n   * @param {any} object the object to test\n   * @returns {boolean} is the object a react element\n   */\n\n\n  var isReactElement = function isReactElement(object) {\n    return !!(object.$$typeof && object._store);\n  };\n  /**\n   * @function getNewCache\n   *\n   * @description\n   * get a new cache object to prevent circular references\n   *\n   * @returns {Object|Weakset} the new cache object\n   */\n\n\n  var getNewCache = function getNewCache() {\n    return HAS_WEAKSET_SUPPORT ? new WeakSet() : Object.create({\n      _values: [],\n      add: function add(value) {\n        this._values.push(value);\n      },\n      has: function has(value) {\n        return !!~this._values.indexOf(value);\n      }\n    });\n  };\n  /**\n   * @function createCircularEqual\n   *\n   * @description\n   * create a custom isEqual handler specific to circular objects\n   *\n   * @param {funtion} [isEqual] the isEqual comparator to use instead of isDeepEqual\n   * @returns {function(any, any): boolean}\n   */\n\n\n  var createCircularEqual = function createCircularEqual(isEqual) {\n    return function (isDeepEqual) {\n      var comparator = isEqual || isDeepEqual;\n      return function (objectA, objectB, cache) {\n        if (cache === void 0) {\n          cache = getNewCache();\n        }\n\n        var cacheHasA = cache.has(objectA);\n        var cacheHasB = cache.has(objectB);\n\n        if (cacheHasA || cacheHasB) {\n          return cacheHasA && cacheHasB;\n        }\n\n        addObjectToCache(objectA, cache);\n        addObjectToCache(objectB, cache);\n        return comparator(objectA, objectB, cache);\n      };\n    };\n  };\n  /**\n   * @function toPairs\n   *\n   * @param {Map} map the map to convert to [key, value] pairs (entries)\n   * @returns {Array<Array<*>>} the [key, value] pairs\n   */\n\n\n  var toPairs = function toPairs(map) {\n    var pairs = [];\n    map.forEach(function (value, key) {\n      return pairs.push([key, value]);\n    });\n    return pairs;\n  };\n  /**\n   * @function toValues\n   *\n   * @param {Set} set the set to convert to values\n   * @returns {Array<*>} the values\n   */\n\n\n  var toValues = function toValues(set) {\n    var values = [];\n    set.forEach(function (value) {\n      return values.push(value);\n    });\n    return values;\n  };\n  /**\n   * @function areArraysEqual\n   *\n   * @description\n   * are the arrays equal in value\n   *\n   * @param {Array<any>} arrayA the array to test\n   * @param {Array<any>} arrayB the array to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta object to pass through\n   * @returns {boolean} are the arrays equal\n   */\n\n\n  var areArraysEqual = function areArraysEqual(arrayA, arrayB, isEqual, meta) {\n    if (arrayA.length !== arrayB.length) {\n      return false;\n    }\n\n    for (var index = 0; index < arrayA.length; index++) {\n      if (!isEqual(arrayA[index], arrayB[index], meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * @function areMapsEqual\n   *\n   * @description\n   * are the maps equal in value\n   *\n   * @param {Map} mapA the map to test\n   * @param {Map} mapB the map to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta map to pass through\n   * @returns {boolean} are the maps equal\n   */\n\n\n  var areMapsEqual = function areMapsEqual(mapA, mapB, isEqual, meta) {\n    if (mapA.size !== mapB.size) {\n      return false;\n    }\n\n    var pairsA = toPairs(mapA);\n    var pairsB = toPairs(mapB);\n\n    for (var index = 0; index < pairsA.length; index++) {\n      if (!hasPair(pairsB, pairsA[index], isEqual, meta) || !hasPair(pairsA, pairsB[index], isEqual, meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * @function areObjectsEqual\n   *\n   * @description\n   * are the objects equal in value\n   *\n   * @param {Object} objectA the object to test\n   * @param {Object} objectB the object to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta object to pass through\n   * @returns {boolean} are the objects equal\n   */\n\n\n  var areObjectsEqual = function areObjectsEqual(objectA, objectB, isEqual, meta) {\n    var keysA = keys(objectA);\n    var keysB = keys(objectB);\n\n    if (keysA.length !== keysB.length) {\n      return false;\n    }\n\n    var key;\n\n    for (var index = 0; index < keysA.length; index++) {\n      key = keysA[index];\n\n      if (!hasValue(keysB, key, sameValueZeroEqual)) {\n        return false;\n      } // if a react element, ignore the \"_owner\" key because its not necessary for equality comparisons\n\n\n      if (key === '_owner' && isReactElement(objectA) && isReactElement(objectB)) {\n        continue;\n      }\n\n      if (!isEqual(objectA[key], objectB[key], meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n  /**\n   * @function areRegExpsEqual\n   *\n   * @description\n   * are the regExps equal in value\n   *\n   * @param {RegExp} regExpA the regExp to test\n   * @param {RegExp} regExpB the regExp to test agains\n   * @returns {boolean} are the regExps equal\n   */\n\n\n  var areRegExpsEqual = function areRegExpsEqual(regExpA, regExpB) {\n    return regExpA.source === regExpB.source && regExpA.global === regExpB.global && regExpA.ignoreCase === regExpB.ignoreCase && regExpA.multiline === regExpB.multiline && regExpA.unicode === regExpB.unicode && regExpA.sticky === regExpB.sticky && regExpA.lastIndex === regExpB.lastIndex;\n  };\n  /**\n   * @function areSetsEqual\n   *\n   * @description\n   * are the sets equal in value\n   *\n   * @param {Set} setA the set to test\n   * @param {Set} setB the set to test against\n   * @param {function} isEqual the comparator to determine equality\n   * @param {any} meta the meta set to pass through\n   * @returns {boolean} are the sets equal\n   */\n\n\n  var areSetsEqual = function areSetsEqual(setA, setB, isEqual, meta) {\n    if (setA.size !== setB.size) {\n      return false;\n    }\n\n    var valuesA = toValues(setA);\n    var valuesB = toValues(setB);\n\n    for (var index = 0; index < valuesA.length; index++) {\n      if (!hasValue(valuesB, valuesA[index], isEqual, meta) || !hasValue(valuesA, valuesB[index], isEqual, meta)) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // constants\n\n\n  var isArray = Array.isArray;\n\n  var createComparator = function createComparator(createIsEqual) {\n    // eslint-disable-next-line no-use-before-define\n    var isEqual = typeof createIsEqual === 'function' ? createIsEqual(comparator) : comparator;\n    /**\n     * @function comparator\n     *\n     * @description\n     * compare the value of the two objects and return true if they are equivalent in values\n     *\n     * @param {any} objectA the object to test against\n     * @param {any} objectB the object to test\n     * @param {any} [meta] an optional meta object that is passed through to all equality test calls\n     * @returns {boolean} are objectA and objectB equivalent in value\n     */\n\n    function comparator(objectA, objectB, meta) {\n      if (sameValueZeroEqual(objectA, objectB)) {\n        return true;\n      }\n\n      var typeOfA = typeof objectA;\n\n      if (typeOfA !== typeof objectB || typeOfA !== 'object' || !objectA || !objectB) {\n        return false;\n      }\n\n      if (isPlainObject(objectA) && isPlainObject(objectB)) {\n        return areObjectsEqual(objectA, objectB, isEqual, meta);\n      }\n\n      var arrayA = isArray(objectA);\n      var arrayB = isArray(objectB);\n\n      if (arrayA || arrayB) {\n        return arrayA === arrayB && areArraysEqual(objectA, objectB, isEqual, meta);\n      }\n\n      var dateA = objectA instanceof Date;\n      var dateB = objectB instanceof Date;\n\n      if (dateA || dateB) {\n        return dateA === dateB && sameValueZeroEqual(objectA.getTime(), objectB.getTime());\n      }\n\n      var regexpA = objectA instanceof RegExp;\n      var regexpB = objectB instanceof RegExp;\n\n      if (regexpA || regexpB) {\n        return regexpA === regexpB && areRegExpsEqual(objectA, objectB);\n      }\n\n      if (isPromiseLike(objectA) || isPromiseLike(objectB)) {\n        return objectA === objectB;\n      }\n\n      if (HAS_MAP_SUPPORT) {\n        var mapA = objectA instanceof Map;\n        var mapB = objectB instanceof Map;\n\n        if (mapA || mapB) {\n          return mapA === mapB && areMapsEqual(objectA, objectB, isEqual, meta);\n        }\n      }\n\n      if (HAS_SET_SUPPORT) {\n        var setA = objectA instanceof Set;\n        var setB = objectB instanceof Set;\n\n        if (setA || setB) {\n          return setA === setB && areSetsEqual(objectA, objectB, isEqual, meta);\n        }\n      }\n\n      return areObjectsEqual(objectA, objectB, isEqual, meta);\n    }\n\n    return comparator;\n  }; // comparator\n\n\n  var circularDeepEqual = createComparator(createCircularEqual());\n  var circularShallowEqual = createComparator(createCircularEqual(sameValueZeroEqual));\n  var deepEqual = createComparator();\n  var shallowEqual = createComparator(function () {\n    return sameValueZeroEqual;\n  });\n  var index = {\n    circularDeep: circularDeepEqual,\n    circularShallow: circularShallowEqual,\n    createCustom: createComparator,\n    deep: deepEqual,\n    sameValueZero: sameValueZeroEqual,\n    shallow: shallowEqual\n  };\n  exports.circularDeepEqual = circularDeepEqual;\n  exports.circularShallowEqual = circularShallowEqual;\n  exports.createCustomEqual = createComparator;\n  exports.deepEqual = deepEqual;\n  exports.default = index;\n  exports.sameValueZeroEqual = sameValueZeroEqual;\n  exports.shallowEqual = shallowEqual;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"sources":["../src/constants.js","../src/utils.js","../src/comparator.js","../src/index.js"],"names":["HAS_MAP_SUPPORT","HAS_SET_SUPPORT","HAS_WEAKSET_SUPPORT","keys","Object","addObjectToCache","object","cache","hasPair","index","pairs","pair","isEqual","pairToMatch","hasValue","values","sameValueZeroEqual","objectA","objectB","isPlainObject","isPromiseLike","isReactElement","getNewCache","_values","add","has","createCircularEqual","comparator","cacheHasA","cacheHasB","toPairs","map","toValues","set","areArraysEqual","arrayA","arrayB","areMapsEqual","mapA","mapB","pairsA","pairsB","areObjectsEqual","keysA","keysB","key","areRegExpsEqual","regExpA","regExpB","areSetsEqual","setA","setB","valuesA","valuesB","isArray","Array","createComparator","createIsEqual","typeOfA","dateA","dateB","regexpA","regexpB","circularDeepEqual","createCustomEqual","circularShallowEqual","deepEqual","shallowEqual","circularDeep","circularShallow","createCustom","deep","sameValueZero","shallow"],"mappings":"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","sourcesContent":["/**\n * @constant {boolean} HAS_MAP_SUPPORT\n */\nexport const HAS_MAP_SUPPORT = typeof Map === 'function';\n\n/**\n * @constant {boolean} HAS_SET_SUPPORT\n */\nexport const HAS_SET_SUPPORT = typeof Set === 'function';\n\n/**\n * @constant {boolean} HAS_WEAKSET_SUPPORT\n */\nexport const HAS_WEAKSET_SUPPORT = typeof WeakSet === 'function';\n","// constants\nimport {HAS_WEAKSET_SUPPORT} from './constants';\n\nconst keys = Object.keys;\n\n/**\n * @function addObjectToCache\n *\n * @description\n * add object to cache if it is indeed an object\n *\n * @param {any} object the object to potentially add to the cache\n * @param {Object|WeakSet} cache the cache to add to\n * @returns {void}\n */\nexport const addObjectToCache = (object, cache) => object && typeof object === 'object' && cache.add(object);\n\n/**\n *\n * @param {Array<Array<any>>} pairs the pairs to check in\n * @param {Array<any>} pairToMatch the pair to check if exists\n * @param {function} isEqual the equality comparator\n * @param {any} meta the meta item to pass through\n * @returns {boolean} does the pair exist in the pairs\n */\nexport const hasPair = (pairs, pairToMatch, isEqual, meta) => {\n  let pair;\n\n  for (let index = 0; index < pairs.length; index++) {\n    pair = pairs[index];\n\n    if (isEqual(pair[0], pairToMatch[0], meta) && isEqual(pair[1], pairToMatch[1], meta)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * @function hasValue\n *\n * @description\n * does the values include the vakye passed\n *\n * @param {Array<any>} values the values to check in\n * @param {any} item the value to locate\n * @param {function} isEqual the equality comparator\n * @param {any} meta the meta item to pass through\n * @returns {boolean} does the value exist in the values\n */\nexport const hasValue = (values, item, isEqual, meta) => {\n  for (let index = 0; index < values.length; index++) {\n    if (isEqual(values[index], item, meta)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\n/**\n * @function sameValueZeroEqual\n *\n * @description\n * are the objects passed strictly equal or both NaN\n *\n * @param {any} objectA the object to compare against\n * @param {any} objectB the object to test\n * @returns {boolean} are the objects equal by the SameValueZero principle\n */\nexport const sameValueZeroEqual = (objectA, objectB) =>\n  objectA === objectB || (objectA !== objectA && objectB !== objectB);\n\n/**\n * @function isPlainObject\n *\n * @description\n * is the object a plain object\n *\n * @param {any} object the object to test\n * @returns {boolean} is the object a plain object\n */\nexport const isPlainObject = (object) => object.constructor === Object;\n\n/**\n * @function isPromiseLike\n *\n * @description\n * is the object promise-like (thenable)\n *\n * @param {any} object the object to test\n * @returns {boolean} is the object promise-like\n */\nexport const isPromiseLike = (object) => typeof object.then === 'function';\n\n/**\n * @function isReactElement\n *\n * @description\n * is the object passed a react element\n *\n * @param {any} object the object to test\n * @returns {boolean} is the object a react element\n */\nexport const isReactElement = (object) => !!(object.$$typeof && object._store);\n\n/**\n * @function getNewCache\n *\n * @description\n * get a new cache object to prevent circular references\n *\n * @returns {Object|Weakset} the new cache object\n */\nexport const getNewCache = () =>\n  HAS_WEAKSET_SUPPORT\n    ? new WeakSet()\n    : Object.create({\n      _values: [],\n      add(value) {\n        this._values.push(value);\n      },\n      has(value) {\n        return !!~this._values.indexOf(value);\n      },\n    });\n\n/**\n * @function createCircularEqual\n *\n * @description\n * create a custom isEqual handler specific to circular objects\n *\n * @param {funtion} [isEqual] the isEqual comparator to use instead of isDeepEqual\n * @returns {function(any, any): boolean}\n */\nexport const createCircularEqual = (isEqual) => (isDeepEqual) => {\n  const comparator = isEqual || isDeepEqual;\n\n  return (objectA, objectB, cache = getNewCache()) => {\n    const cacheHasA = cache.has(objectA);\n    const cacheHasB = cache.has(objectB);\n\n    if (cacheHasA || cacheHasB) {\n      return cacheHasA && cacheHasB;\n    }\n\n    addObjectToCache(objectA, cache);\n    addObjectToCache(objectB, cache);\n\n    return comparator(objectA, objectB, cache);\n  };\n};\n\n/**\n * @function toPairs\n *\n * @param {Map} map the map to convert to [key, value] pairs (entries)\n * @returns {Array<Array<*>>} the [key, value] pairs\n */\nexport const toPairs = (map) => {\n  const pairs = [];\n\n  map.forEach((value, key) => pairs.push([key, value]));\n\n  return pairs;\n};\n\n/**\n * @function toValues\n *\n * @param {Set} set the set to convert to values\n * @returns {Array<*>} the values\n */\nexport const toValues = (set) => {\n  const values = [];\n\n  set.forEach((value) => values.push(value));\n\n  return values;\n};\n\n/**\n * @function areArraysEqual\n *\n * @description\n * are the arrays equal in value\n *\n * @param {Array<any>} arrayA the array to test\n * @param {Array<any>} arrayB the array to test against\n * @param {function} isEqual the comparator to determine equality\n * @param {any} meta the meta object to pass through\n * @returns {boolean} are the arrays equal\n */\nexport const areArraysEqual = (arrayA, arrayB, isEqual, meta) => {\n  if (arrayA.length !== arrayB.length) {\n    return false;\n  }\n\n  for (let index = 0; index < arrayA.length; index++) {\n    if (!isEqual(arrayA[index], arrayB[index], meta)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * @function areMapsEqual\n *\n * @description\n * are the maps equal in value\n *\n * @param {Map} mapA the map to test\n * @param {Map} mapB the map to test against\n * @param {function} isEqual the comparator to determine equality\n * @param {any} meta the meta map to pass through\n * @returns {boolean} are the maps equal\n */\nexport const areMapsEqual = (mapA, mapB, isEqual, meta) => {\n  if (mapA.size !== mapB.size) {\n    return false;\n  }\n\n  const pairsA = toPairs(mapA);\n  const pairsB = toPairs(mapB);\n\n  for (let index = 0; index < pairsA.length; index++) {\n    if (!hasPair(pairsB, pairsA[index], isEqual, meta) || !hasPair(pairsA, pairsB[index], isEqual, meta)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * @function areObjectsEqual\n *\n * @description\n * are the objects equal in value\n *\n * @param {Object} objectA the object to test\n * @param {Object} objectB the object to test against\n * @param {function} isEqual the comparator to determine equality\n * @param {any} meta the meta object to pass through\n * @returns {boolean} are the objects equal\n */\nexport const areObjectsEqual = (objectA, objectB, isEqual, meta) => {\n  const keysA = keys(objectA);\n  const keysB = keys(objectB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  let key;\n\n  for (let index = 0; index < keysA.length; index++) {\n    key = keysA[index];\n\n    if (!hasValue(keysB, key, sameValueZeroEqual)) {\n      return false;\n    }\n\n    // if a react element, ignore the \"_owner\" key because its not necessary for equality comparisons\n    if (key === '_owner' && isReactElement(objectA) && isReactElement(objectB)) {\n      continue;\n    }\n\n    if (!isEqual(objectA[key], objectB[key], meta)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * @function areRegExpsEqual\n *\n * @description\n * are the regExps equal in value\n *\n * @param {RegExp} regExpA the regExp to test\n * @param {RegExp} regExpB the regExp to test agains\n * @returns {boolean} are the regExps equal\n */\nexport const areRegExpsEqual = (regExpA, regExpB) =>\n  regExpA.source === regExpB.source\n  && regExpA.global === regExpB.global\n  && regExpA.ignoreCase === regExpB.ignoreCase\n  && regExpA.multiline === regExpB.multiline\n  && regExpA.unicode === regExpB.unicode\n  && regExpA.sticky === regExpB.sticky\n  && regExpA.lastIndex === regExpB.lastIndex;\n\n/**\n * @function areSetsEqual\n *\n * @description\n * are the sets equal in value\n *\n * @param {Set} setA the set to test\n * @param {Set} setB the set to test against\n * @param {function} isEqual the comparator to determine equality\n * @param {any} meta the meta set to pass through\n * @returns {boolean} are the sets equal\n */\nexport const areSetsEqual = (setA, setB, isEqual, meta) => {\n  if (setA.size !== setB.size) {\n    return false;\n  }\n\n  const valuesA = toValues(setA);\n  const valuesB = toValues(setB);\n\n  for (let index = 0; index < valuesA.length; index++) {\n    if (!hasValue(valuesB, valuesA[index], isEqual, meta) || !hasValue(valuesA, valuesB[index], isEqual, meta)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n","// constants\nimport {\n  HAS_MAP_SUPPORT,\n  HAS_SET_SUPPORT,\n} from './constants';\n\n// utils\nimport {\n  areArraysEqual,\n  areMapsEqual,\n  areObjectsEqual,\n  areRegExpsEqual,\n  areSetsEqual,\n  isPlainObject,\n  isPromiseLike,\n  sameValueZeroEqual,\n} from './utils';\n\nconst isArray = Array.isArray;\n\nconst createComparator = (createIsEqual) => {\n  // eslint-disable-next-line no-use-before-define\n  const isEqual = typeof createIsEqual === 'function' ? createIsEqual(comparator) : comparator;\n\n  /**\n   * @function comparator\n   *\n   * @description\n   * compare the value of the two objects and return true if they are equivalent in values\n   *\n   * @param {any} objectA the object to test against\n   * @param {any} objectB the object to test\n   * @param {any} [meta] an optional meta object that is passed through to all equality test calls\n   * @returns {boolean} are objectA and objectB equivalent in value\n   */\n  function comparator(objectA, objectB, meta) {\n    if (sameValueZeroEqual(objectA, objectB)) {\n      return true;\n    }\n\n    const typeOfA = typeof objectA;\n\n    if (typeOfA !== typeof objectB || typeOfA !== 'object' || !objectA || !objectB) {\n      return false;\n    }\n\n    if (isPlainObject(objectA) && isPlainObject(objectB)) {\n      return areObjectsEqual(objectA, objectB, isEqual, meta);\n    }\n\n    const arrayA = isArray(objectA);\n    const arrayB = isArray(objectB);\n\n    if (arrayA || arrayB) {\n      return arrayA === arrayB && areArraysEqual(objectA, objectB, isEqual, meta);\n    }\n\n    const dateA = objectA instanceof Date;\n    const dateB = objectB instanceof Date;\n\n    if (dateA || dateB) {\n      return dateA === dateB && sameValueZeroEqual(objectA.getTime(), objectB.getTime());\n    }\n\n    const regexpA = objectA instanceof RegExp;\n    const regexpB = objectB instanceof RegExp;\n\n    if (regexpA || regexpB) {\n      return regexpA === regexpB && areRegExpsEqual(objectA, objectB);\n    }\n\n    if (isPromiseLike(objectA) || isPromiseLike(objectB)) {\n      return objectA === objectB;\n    }\n\n    if (HAS_MAP_SUPPORT) {\n      const mapA = objectA instanceof Map;\n      const mapB = objectB instanceof Map;\n\n      if (mapA || mapB) {\n        return mapA === mapB && areMapsEqual(objectA, objectB, isEqual, meta);\n      }\n    }\n\n    if (HAS_SET_SUPPORT) {\n      const setA = objectA instanceof Set;\n      const setB = objectB instanceof Set;\n\n      if (setA || setB) {\n        return setA === setB && areSetsEqual(objectA, objectB, isEqual, meta);\n      }\n    }\n\n    return areObjectsEqual(objectA, objectB, isEqual, meta);\n  }\n\n  return comparator;\n};\n\nexport default createComparator;\n","// comparator\nimport createCustomEqual from './comparator';\n\n// utils\nimport {\n  createCircularEqual,\n  sameValueZeroEqual,\n} from './utils';\n\nexport {\n  createCustomEqual, sameValueZeroEqual,\n};\n\nexport const circularDeepEqual = createCustomEqual(createCircularEqual());\nexport const circularShallowEqual = createCustomEqual(createCircularEqual(sameValueZeroEqual));\nexport const deepEqual = createCustomEqual();\nexport const shallowEqual = createCustomEqual(() => sameValueZeroEqual);\n\nexport default {\n  circularDeep: circularDeepEqual,\n  circularShallow: circularShallowEqual,\n  createCustom: createCustomEqual,\n  deep: deepEqual,\n  sameValueZero: sameValueZeroEqual,\n  shallow: shallowEqual,\n};\n"]},"metadata":{},"sourceType":"script"}